<# Malware VM Creator

Version: 0.1.11

Current actions:

 - Set language / keyboard / TZ to UK
 - Change icons to small
 - Mozilla Firefox
 - Create tools folder
 - 7-Zip
 - PEStudio
 - PEView
 - NotePad++
 - Ghidra (incl JRE 17)
 - JetBrians dotPeek
 - OllyDBG
 - PEiD
 - Detect It Easy
 - WinDBG
 - x64DBG
 - PE Bear
 - dnSpy
 - Mandiant Floss
 - Python
 - Pycharm

#>

# Set up variables
$desktop = $HOME + "\Desktop"
$toolsFolder = $HOME + "\Desktop\tools"

# Change the language / keyboard settings
#
Write-Host "Changing langauge / Keyboard settings" -ForegroundColor Green
Set-WinSystemLocale -SystemLocale en-GB
Set-WinHomeLocation -GeoId 242
Set-WinUserLanguageList -LanguageList (New-WinUserLanguageList -Language en-GB) -Force


# Change desktop icons to small
#
Write-Host "Changing desktop icons to small" -ForegroundColor Green
Set-ItemProperty -path HKCU:\Software\Microsoft\Windows\Shell\Bags\1\Desktop -name IconSize -value 36
Stop-Process -name explorer  # explorer.exe restarts automatically after stop


# Install Firefox (quiet mode)
#
Write-Host "Installing latest version of Firefox" -ForegroundColor Green
$SourceURL = "https://download.mozilla.org/?product=firefox-msi-latest-ssl&os=win64&lang=en-US"
$Installer = $HOME + "\downloads" + "\firefox.msi"

$wc = New-Object net.webclient
$wc.Downloadfile($SourceURL, $Installer)

$args = @("/passive")
Start-Process "$Installer" -ArgumentList $args -Wait


# Create tools folder
#
if (-Not (Test-Path $toolsFolder -PathType Container)) {
    Write-Host "Folder $toolsFolder does not exist" -ForegroundColor Yellow
    Write-Host "Creating folder" -ForegroundColor Green
    New-Item -Path $desktop -Name "tools" -ItemType "directory" | Out-Null
    if (-Not (Test-Path $toolsFolder -PathType Container)) {
        Write-Host "Error creating folder!" -ForegroundColor Red
        [Environment]::Exit(1)
        }
    Write-Host "Created!" -ForegroundColor Green
    } 
else {
    Write-Host "Folder $toolsFolder exists" -ForegroundColor Green
}


# Installing 7-Zip
#
Write-Host "Installing 7-Zip..." -ForegroundColor Green
$7zipURL = "https://www.7-zip.org/a/7z2201-x64.exe"
$7zipEXE = $HOME + "\Downloads\7z2201-x64.exe"

$wc = New-Object net.webclient
$wc.Downloadfile($7zipURL, $7zipEXE)

Write-Host "Installing 7-Zip..." -ForegroundColor Green
$args = @("/S")
Start-Process "$7zipEXE" -ArgumentList $args -Wait

Write-Host "Creating shortcut..." -ForegroundColor Green
$WScriptShell = New-Object -ComObject WScript.Shell
$Shortcut = $WScriptShell.CreateShortcut($desktop + "\7-Zip.lnk")
$Shortcut.WorkingDirectory = "C:\Program Files\7-Zip"
$Shortcut.TargetPath = "C:\Program Files\7-Zip\7zFM.exe"
$Shortcut.Save()


# PEStudio latest version:
#
Write-Host "Installing PEStudio..." -ForegroundColor Green
$pestudioURL = "https://www.winitor.com/tools/pestudio/current/pestudio.zip"
$pestudioFile = $toolsFolder + "\PEStudio\pestudio.zip"
$pestudioFolder = $toolsFolder + "\PEStudio"
New-Item -Path $toolsFolder -Name "PEStudio" -ItemType "directory" | Out-Null
Invoke-WebRequest -Uri $pestudioURL -OutFile $pestudioFile
Expand-Archive -LiteralPath $pestudioFile -DestinationPath $pestudioFolder
$WScriptShell = New-Object -ComObject WScript.Shell
$Shortcut = $WScriptShell.CreateShortcut($desktop + "\PEStudio.lnk")
$Shortcut.WorkingDirectory = $toolsFolder + "\PEStudio\pestudio"
$Shortcut.TargetPath = $toolsFolder + "\PEStudio\pestudio\pestudio.exe"
$Shortcut.Save()


# PEView latest version
#
Write-Host "Installing PEView..." -ForegroundColor Green
$PEViewURL = "http://wjradburn.com/software/PEview.zip"
$peviewFile = $toolsFolder + "\PEView\peview.zip"
$peviewFolder = $toolsFolder + "\PEView"
New-Item -Path $toolsFolder -Name "PEView" -ItemType "directory" | Out-Null
Invoke-WebRequest -Uri $PEViewURL -OutFile $peviewFile
Expand-Archive -LiteralPath $peviewFile -DestinationPath $peviewFolder
$WScriptShell = New-Object -ComObject WScript.Shell
$Shortcut = $WScriptShell.CreateShortcut($desktop + "\PEView.lnk")
$Shortcut.WorkingDirectory = $toolsFolder + "\PEView"
$Shortcut.TargetPath = $toolsFolder + "\PEView\PEview.exe"
$Shortcut.Save()


# Installing NotePad++
#
Write-Host "Installing Notepad++..." -ForegroundColor Green
$url = "https://github.com/notepad-plus-plus/notepad-plus-plus/releases/latest"
$response = Invoke-WebRequest -Uri $url -UseBasicParsing
$found = $response.Content -match '.*(npp\.[0-9\.]+\.Installer.x64.exe).*'

if ($found) {
    Write-Host "Latest version found." -ForegroundColor Green
    $nppExe = $matches[1]
    Write-Host $nppExe -ForegroundColor Green

    $verCheck = $nppExe -match '.*(\d+\.\d+\.\d+).*'
    $ver = $matches[1]
    Write-Host "Version = " $ver -ForegroundColor Green
    $dl = "https://github.com/notepad-plus-plus/notepad-plus-plus/releases/download/v" + $ver + "/npp." + $ver + ".Installer.x64.exe"
    # https://github.com/notepad-plus-plus/notepad-plus-plus/releases/download/v8.4.9/npp.8.4.9.Installer.x64.exe
    Write-Host "Download link = " $dl -ForegroundColor Green
    
    $nppFile = $toolsFolder + "\NotePad++\npp." + $ver + ".Installer.exe"

    $nppFolder = $toolsFolder + "\NotePad++"
    New-Item -Path $toolsFolder -Name "NotePad++" -ItemType "directory" | Out-Null
    
    # Download the file
    $wc = New-Object net.webclient
    $wc.Downloadfile($dl, $nppFile)
        
    $args = @("/S")
    Start-Process "$nppFile" -ArgumentList $args -Wait

    $WScriptShell = New-Object -ComObject WScript.Shell
    $Shortcut = $WScriptShell.CreateShortcut($desktop + "\NotePad++.lnk")
    $Shortcut.WorkingDirectory = "C:\Program Files\NotePad++\"
    $Shortcut.TargetPath = "C:\Program Files\NotePad++\notepad++.exe"
    $Shortcut.Save()
} else {
    Write-Host "Notepad++ latest version not found." -ForegroundColor Red
}


# Download JAVA JRE 17 LTS (quiet mode)
#
$jreURL = "https://corretto.aws/downloads/latest/amazon-corretto-17-x64-windows-jdk.msi"
$jreExe = $HOME + "\downloads" + "\jre-17.msi"

$wc = New-Object net.webclient
Write-Host "Downloading JRE 17 from Amazon..." -ForegroundColor Green
$wc.Downloadfile($jreURL, $jreExe)

Write-Host "Installing JRE 17..." -ForegroundColor Green
$args = @("/passive")
Start-Process "$jreExe" -ArgumentList $args -Wait


# Checking the latest version of Ghidra
#
$Uri = 'https://github.com/NationalSecurityAgency/ghidra/releases/latest'
$Results = Invoke-WebRequest -Method Get -Uri $Uri -MaximumRedirection 0 -ErrorAction SilentlyContinue -UseBasicParsing
Write-Host $Results.Headers.Location -ForegroundColor Cyan
Write-Host "Downloading Ghidra_10.2.3_build" -ForegroundColor Cyan
Start-Sleep -Seconds 2

$ghidraURL = "https://github.com/NationalSecurityAgency/ghidra/releases/download/Ghidra_10.2.3_build/ghidra_10.2.3_PUBLIC_20230208.zip"
$ghidraExe = $HOME + "\Downloads\ghidra_10.2.3.zip"

$wc = New-Object net.webclient
Write-Host "Downloading Ghidra..." -ForegroundColor Green
$wc.Downloadfile($ghidraURL, $ghidraExe)

$ghidraFolder = $toolsFolder + "\ghidra"
New-Item -Path $toolsFolder -Name "ghidra" -ItemType "directory" | Out-Null

set-alias sz "$env:ProgramFiles\7-Zip\7z.exe"
sz x "-o$($ghidraFolder)" $ghidraExe > $null

# Write-Host "Extracting Ghidra..." -ForegroundColor Green
# Expand-Archive -Path $ghidraExe -DestinationPath $ghidraFolder

$iconFile = "https://raw.githubusercontent.com/NationalSecurityAgency/ghidra/master/Ghidra/RuntimeScripts/Windows/support/ghidra.ico"
$iconLoc = $ghidraFolder + "\ghidra.ico"
Write-Host "Downloading Ghidra icon..." -ForegroundColor Green
$wc.Downloadfile($iconFile, $iconLoc)

Write-Host "Creating shortcut..." -ForegroundColor Green
$WScriptShell = New-Object -ComObject WScript.Shell
$Shortcut = $WScriptShell.CreateShortcut($desktop + "\Ghidra.lnk")
$Shortcut.WorkingDirectory = $toolsFolder + "\ghidra\ghidra_10.2.3_PUBLIC"
$Shortcut.TargetPath = $toolsFolder + "\ghidra\ghidra_10.2.3_PUBLIC\ghidraRun.bat"
$Shortcut.IconLocation = $iconLoc
$Shortcut.Save()


# JetBrains dotPeek
#
$dotPeekURL = 'https://download.jetbrains.com/resharper/dotUltimate.2022.3.2/JetBrains.dotPeek.2022.3.2.web.exe'
$dotPeekExe = $HOME + "\Downloads\dotPeek.2022.3.2.web.exe"

$wc = New-Object net.webclient
Write-Host "Downloading JetBrains dotPeek..." -ForegroundColor Green
$wc.Downloadfile($dotPeekURL, $dotPeekExe)

Write-Host "Installing JetBrains dotPeek..." -ForegroundColor Green
$args = @("/Silent=True")
Start-Process "$dotPeekExe" -ArgumentList $args -Wait

Write-Host "Creating shortcut for JetBrains dotPeek......" -ForegroundColor Green
$WScriptShell = New-Object -ComObject WScript.Shell
$Shortcut = $WScriptShell.CreateShortcut($desktop + "\dotPeek.lnk")
$Shortcut.WorkingDirectory = $desktop
$Shortcut.TargetPath = $HOME + "\AppData\Local\JetBrains\Installations\dotPeek223\dotPeek64.exe"
$Shortcut.Save()



# Installing OllyDBG
#
Write-Host "Installing OllyDbg..." -ForegroundColor Green
$ollyURL = "http://www.ollydbg.de/odbg110.zip"
$ollyFile = $HOME + "\Downloads\ollydbg.zip"

Write-Host "Downloading OllyDBG..." -ForegroundColor Green
$wc = New-Object net.webclient
$wc.Downloadfile($ollyURL, $ollyFile) 

Write-Host "Creating OllyDBG folder..." -ForegroundColor Green
$ollyFolder = $toolsFolder + "\ollydbg"
New-Item -Path $ollyFolder -ItemType "directory" | Out-Null

Write-Host "Extracting file..." -ForegroundColor Green
Expand-Archive -LiteralPath $ollyFile -DestinationPath $ollyFolder
$WScriptShell = New-Object -ComObject WScript.Shell
$Shortcut = $WScriptShell.CreateShortcut($desktop + "\OllyDBG.lnk")
$Shortcut.WorkingDirectory = $ollyFolder
$Shortcut.TargetPath = $ollyFolder + "\OLLYDBG.exe"
$Shortcut.Save()



# Installing PEiD
#
Write-Host "Installing PEiD..." -ForegroundColor Green
$peidURL = "https://github.com/hughesdg/malware-vm/raw/main/PEiD-0.95-20081103.zip"
$peidFolder = $toolsFolder + "\peid"
$peidFile = $peidFolder + "\PEiD-0.95-20081103.zip"

Write-Host "Creating working folder..." -ForegroundColor Green
New-Item -Path $toolsFolder -Name "peid" -ItemType "directory" | Out-Null

Write-Host "Downloading PEiD..." -ForegroundColor Green

$wc = New-Object net.webclient
$wc.Downloadfile($peidURL, $peidFile)

Write-Host "Extracting files..." -ForegroundColor Green
Expand-Archive -LiteralPath $peidFile -DestinationPath $peidFolder
$WScriptShell = New-Object -ComObject WScript.Shell
$Shortcut = $WScriptShell.CreateShortcut($desktop + "\PEiD.lnk")
$Shortcut.WorkingDirectory = $peidFolder
$Shortcut.TargetPath = $peidFolder + "/PEiD.exe"
$Shortcut.Save()


# Detect It Easy:
#
Write-Host "Installing DIE..." -ForegroundColor Green
$dieURL = "https://github.com/horsicq/DIE-engine/releases/download/3.07/die_win64_portable_3.07.zip"
$dieFile = $toolsFolder + "\die\die_win64_portable_3.07.zip"
$dieFolder = $toolsFolder + "\die"
New-Item -Path $toolsFolder -Name "die" -ItemType "directory" | Out-Null

$wc = New-Object net.webclient
$wc.Downloadfile($dieURL, $dieFile)

Expand-Archive -LiteralPath $dieFile -DestinationPath $dieFolder
$WScriptShell = New-Object -ComObject WScript.Shell
$Shortcut = $WScriptShell.CreateShortcut($desktop + "\DiE.lnk")
$Shortcut.WorkingDirectory = $dieFolder
$Shortcut.TargetPath = $dieFolder + "\die.exe"
$Shortcut.Save()


# WinDBG:
#
Write-Host "Installing WinDBG..." -ForegroundColor Green
$windbgURL = "https://aka.ms/windbg/download"
$windbgFile = $toolsFolder + "\windbg\windbg.appinstaller"
$windbgFolder = $toolsFolder + "\windbg"
New-Item -Path $toolsFolder -Name "windbg" -ItemType "directory" | Out-Null

$wc = New-Object net.webclient
$wc.Downloadfile($windbgURL, $windbgFile)


$str = select-string  -pattern "MainBundle" -Path $windbgFile
if ($str -match 'Uri="([^"]+)"') {
  Write-Host "Found version: " $matches[1] -ForegroundColor Green
  Add-AppxPackage $matches[1]
}
else {
  Write-Host "Problem finding version!" -ForegroundColor Red
}



# X64DBG:
#
Write-Host "Installing X64DBG..." -ForegroundColor Green

$url = "https://github.com/x64dbg/x64dbg/releases/latest"
$response = Invoke-WebRequest -Uri $url -UseBasicParsing
$found = $response.Content -match '.*(snapshot_[0-9_-]+\.zip).*'

if ($found) {
  $ver = $matches[1]
  Write-Host "Latest version found = " $ver -ForegroundColor Green
  $x64dbgURL = "https://github.com/x64dbg/x64dbg/releases/download/snapshot/" + $ver
  Write-Host "Download link = " $x64dbgURL -ForegroundColor Green

  $x64dbgFile = $toolsFolder + "\x64dbg\x64dbg.zip"
  $x64dbgFolder = $toolsFolder + "\x64dbg"
  New-Item -Path $toolsFolder -Name "x64dbg" -ItemType "directory" | Out-Null
  
  $wc = New-Object net.webclient
  $wc.Downloadfile($x64dbgURL, $x64dbgFile)
  
  Expand-Archive -LiteralPath $x64dbgFile -DestinationPath $x64dbgFolder
  Write-Host "Adding shortcuts..." -ForegroundColor Green

  $WScriptShell = New-Object -ComObject WScript.Shell
  $Shortcut = $WScriptShell.CreateShortcut($desktop + "\X64dbg.lnk")
  $Shortcut.WorkingDirectory = $x64dbgFolder
  $Shortcut.TargetPath = $x64dbgFolder + "\release\x64\x64dbg.exe"
  $Shortcut.Save()

  $WScriptShell = New-Object -ComObject WScript.Shell
  $Shortcut = $WScriptShell.CreateShortcut($desktop + "\X32dbg.lnk")
  $Shortcut.WorkingDirectory = $x32dbgFolder
  $Shortcut.TargetPath = $x64dbgFolder + "\release\x32\x32dbg.exe"
  $Shortcut.Save()

} else {
    Write-Host "x64dbg latest version not found." -ForegroundColor Red
}


# Installing PE Bear
#
# Needs Visual C++ redistributable (normally already installed)
#
Write-Host "Installing PEBear..." -ForegroundColor Green
$pebearURL = "https://github.com/hasherezade/pe-bear/releases/download/v0.6.5.2/PE-bear_0.6.5.2_x64_win_vs13.zip"
$pebearFile = $toolsFolder + "\pebear\pebear.zip"
$pebearFolder = $toolsFolder + "\pebear"
New-Item -Path $toolsFolder -Name "pebear" -ItemType "directory" | Out-Null

$wc = New-Object net.webclient
$wc.Downloadfile($pebearURL, $pebearFile)

Expand-Archive -LiteralPath $pebearFile -DestinationPath $pebearFolder

Write-Host "Adding shortcut..." -ForegroundColor Green

$WScriptShell = New-Object -ComObject WScript.Shell
$Shortcut = $WScriptShell.CreateShortcut($desktop + "\PEBear.lnk")
$Shortcut.WorkingDirectory = $pebearFolder
$Shortcut.TargetPath = $pebearFolder + "\pe-bear.exe"
$Shortcut.Save()


# Installing dnSpy
#
Write-Host "Installing dnSpy..." -ForegroundColor Green
$dl = "https://github.com/dnSpy/dnSpy/releases/download/v6.1.8/dnSpy-net-win64.zip"

$dnSpyFile = $toolsFolder + "\dnSpy\dnSpy-net-win64.zip"
$dnSpyFolder = $toolsFolder + "\dnSpy"
New-Item -Path $toolsFolder -Name "dnSpy" -ItemType "directory" | Out-Null

$wc = New-Object net.webclient
$wc.Downloadfile($dl, $dnSpyFile)

Write-Host "Expanding zip file..." -ForegroundColor Green
set-alias sz "$env:ProgramFiles\7-Zip\7z.exe"
sz x "-o$($dnSpyFolder)" $dnSpyFile > $null

Write-Host "Adding shortcut..." -ForegroundColor Green

$WScriptShell = New-Object -ComObject WScript.Shell
$Shortcut = $WScriptShell.CreateShortcut($desktop + "\dnSpy.lnk")
$Shortcut.WorkingDirectory = $dnSpyFolder
$Shortcut.TargetPath = $dnSpyFolder + "\dnSpy.exe"
$Shortcut.Save()


# Installing Mandiant Floss
#
Write-Host "Installing Floss (Windows)..." -ForegroundColor Green

$url = "https://github.com/mandiant/flare-floss/releases/latest"
$response = Invoke-WebRequest -Uri $url -UseBasicParsing
$found = $response.Content -match ".*releases/tag/(v[0-9\.]+).*"

if ($found) {
  $ver = $matches[1]
  Write-Host "Latest version found = " $ver -ForegroundColor Green
  $flossURL = "https://github.com/mandiant/flare-floss/releases/download/" + $ver + "/floss-" + $ver + "-windows.zip"
  Write-Host "Download link = " $flossURL -ForegroundColor Green

  $flossFile = $toolsFolder + "\floss\flare-floss.zip"
  $flossFolder = $toolsFolder + "\floss"
  New-Item -Path $toolsFolder -Name "floss" -ItemType "directory" | Out-Null
  
  $wc = New-Object net.webclient
  $wc.Downloadfile($flossURL, $flossFile)

  Expand-Archive -LiteralPath $flossFile -DestinationPath $flossFolder
  Write-Host "Adding shortcuts..." -ForegroundColor Green

  $WScriptShell = New-Object -ComObject WScript.Shell
  $Shortcut = $WScriptShell.CreateShortcut($desktop + "\Floss.lnk")
  $Shortcut.WorkingDirectory = $flossFolder
  $Shortcut.TargetPath = $flossFolder + "\floss.exe"
  $Shortcut.Save()
    
} else {

  Write-Host "Unable to install Mandiant Floss"

}



# Installing PyCharm (Community)
#
Write-Host "Installing PyCharm (Community)..." -ForegroundColor Green

$PCUrl = "https://download.jetbrains.com/python/pycharm-community-2023.1.2.exe"
$ConfURL = "https://download.jetbrains.com/python/silent.config"

$PCfile = $toolsFolder + "\PyCharm\pycharm.exe"
$ConfFile = $toolsFolder + "\PyCharm\pycharm.conf"
$pythonFolder = $toolsFolder + "\PyCharm"
New-Item -Path $toolsFolder -Name "PyCharm" -ItemType "directory" | Out-Null


Write-Host "Downloading PyCharm..." -ForegroundColor Cyan
$wc = New-Object net.webclient
$wc.Downloadfile($PCUrl, $PCfile)

Write-Host "Downloading config file..." -ForegroundColor Cyan
$wc = New-Object net.webclient
$wc.Downloadfile($ConfURL, $ConfFile)

Write-Host "Updating config file..." -ForegroundColor Cyan
$content = Get-Content -Path $ConfFile
$newContent = $content -replace '.py=0', '.py=1'
$newContent | Set-Content -Path $ConfFile

Write-Host "Installing PyCharm..." -ForegroundColor Green
# pycharm-professional.exe /S /CONFIG=d:\temp\silent.config /D=d:\IDE\PyCharm
$args = @("/S", "/CONFIG=$ConfFile", "/D=c:\windows\PyCharm")
Start-Process $PCfile -ArgumentList $args -Wait


# WORKING UP TO HERE

# To do...
# 
# Resource Hacker (http://www.angusj.com/resourcehacker/reshacker_setup.exe)
# WireShark (https://www.wireshark.org/download.html)
# ProcMon (https://download.sysinternals.com/files/ProcessMonitor.zip)
# ProcDot (https://www.procdot.com/downloadprocdotbinaries.htm)
# Process Explorer (https://download.sysinternals.com/files/ProcessExplorer.zip)
# RegShot (https://github.com/Seabreg/Regshot)
# Add bookmarks to FireFox
# apktool <--- Linux only
#
# Update the Start Menu
#
# Use 7z t extract DiE
#
# Shut off auto proxy
# Add Windows terminal (from PMAT course)


<#

# Install HxD Hex Editor (requires user action)
#
Write-Host "Installing HxD (Requires user input)..." -ForegroundColor Green
$hxdURL = "https://mh-nexus.de/downloads/HxDSetup.zip"
$hxdFile = "c:\users\ieuser\Documents\tools\hxd\HxDSetup.zip"
$hxdEXE = "c:\users\ieuser\Documents\tools\hxd\HxDSetup.exe"
$hxdFolder = "c:\users\ieuser\Documents\tools\hxd"
New-Item -Path "C:\Users\IEUser\Documents\tools\" -Name "hxd" -ItemType "directory" | Out-Null
Invoke-WebRequest -Uri $hxdURL -OutFile $hxdFile
Expand-Archive -LiteralPath $hxdFile -DestinationPath $hxdFolder
Start-Process $hxdEXE
# Start this only after previous is complete ?? -Wait option on above
#
#$WScriptShell = New-Object -ComObject WScript.Shell
#$Shortcut = $WScriptShell.CreateShortcut("C:\Users\IEUser\Desktop\HxD.lnk")
#$Shortcut.WorkingDirectory = "C:\Program Files\HxD"
#$Shortcut.TargetPath = "C:\Program Files\HxD\HxD.exe"
#$Shortcut.Save()



#>


<#

NEED TO FIX this

# UPX (Dos programme??)
#
Write-Host "Installing UPX Packer..." -ForegroundColor Green
$upxURL = "https://github.com/upx/upx/releases/download/v3.96/upx-3.96-win32.zip"
$upxFile = "c:\users\ieuser\Documents\tools\UPX\upx396w32.zip"
$upxFolder = "c:\users\ieuser\Documents\tools\UPX"
New-Item -Path "C:\Users\IEUser\Documents\tools\" -Name "UPX" -ItemType "directory" | Out-Null
Invoke-WebRequest -Uri $upxURL -OutFile $upxFile
Expand-Archive -LiteralPath $upxFile -DestinationPath $upxFolder

#>

